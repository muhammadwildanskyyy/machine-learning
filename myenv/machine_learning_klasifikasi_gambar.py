# -*- coding: utf-8 -*-
"""Machine Learning Klasifikasi Gambar.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1RQb3tmws5dujhNIQEZ1S6KNE-kD8qIaq

Data Diri Saya

Nama : Muhammad WildaN Yulio Ardana
Kota : Surabaya

Inastal split-folders
"""

pip install split-folders

"""Import Library"""

# Commented out IPython magic to ensure Python compatibility.
import tensorflow as tf
import zipfile, os
import splitfolders
from tensorflow.keras.utils import to_categorical
import numpy as np
from google.colab import files
from tensorflow.keras.preprocessing import image
import matplotlib.pyplot as plt

# %matplotlib inline

"""Pengambilan Data"""

!wget --no-check-certificate \
  https://github.com/dicodingacademy/assets/releases/download/release/rockpaperscissors.zip \
  -O /tmp/rockpaperscissors.zip

"""Proses Ekstraksi File dan Membagi Dalam Data Latih dan Validaasi"""

# Melakukan ekstraksi data dari file zip

local_zip = '/tmp/rockpaperscissors.zip'
zip_ref = zipfile.ZipFile(local_zip, 'r')
zip_ref.extractall('/tmp')
zip_ref.close()

base_zip = '/tmp/rockpaperscissors/rps-cv-images'

# Buat directories untuk Latih dan validasi

output_dir = '/tmp/rockpaperscissors_split'
train_dir = os.path.join(output_dir, 'train')
val_dir = os.path.join(output_dir, 'val')

# Split data ke Latih dan validasi
splitfolders.ratio(base_zip, output=output_dir, ratio=(.6, .4), group_prefix=None)

os.listdir('/tmp/rockpaperscissors/rps-cv-images')

# melihat jumlah file yang ada dalam folder terkait

print("Train : ", len(os.listdir(train_dir)))
print("Validation : ", len(os.listdir(val_dir)))

"""Membagi File ke Dalam Kategori Train (train_zip) dan Validasi (val_zip)"""

train_zip = tf.keras.utils.image_dataset_from_directory(
  base_zip,
  validation_split=0.4,
  subset="training",
  image_size=(150,150),
  batch_size=32,
  seed=42)

val_zip = tf.keras.utils.image_dataset_from_directory(
  base_zip,
  validation_split=0.4,
  subset="validation",
  image_size=(150,150),
  batch_size=32,
  seed=42)

"""Augmentasi Image"""

from tensorflow.keras.preprocessing.image import ImageDataGenerator
train_datagen = ImageDataGenerator(
                    rescale=1./255,
                    rotation_range=20,
                    horizontal_flip=True,
                    shear_range = 0.2,
                    fill_mode = 'nearest')

validation_datagen = ImageDataGenerator(
                    rescale=1./255)

"""Menyiapkan data train dan validasi ke dalam fungsi Flow()"""

train_generator = train_datagen.flow_from_directory(
        train_dir,  # direktori data latih
        target_size=(150, 150),  # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=4,
        # class_mode = 'categorical' karena kelas lebih dari 2
        class_mode='categorical'
        )

validation_generator = validation_datagen.flow_from_directory(
        val_dir, # direktori data validasi
        target_size=(150, 150), # mengubah resolusi seluruh gambar menjadi 150x150 piksel
        batch_size=4,        # class_mode = 'categorical' karena kelas lebih dari 2
        class_mode='categorical'
        )

"""Menyiapkan model"""

model = tf.keras.models.Sequential([
    tf.keras.layers.Conv2D(32, (3,3), activation='relu', input_shape=(150, 150, 3)),
    tf.keras.layers.MaxPooling2D(2, 2),
    tf.keras.layers.Conv2D(64, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(128, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Conv2D(512, (3,3), activation='relu'),
    tf.keras.layers.MaxPooling2D(2,2),
    tf.keras.layers.Flatten(),
    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dense(3, activation='softmax')
])

model.summary()

# Mengasumsikan label ada di dalam train_generator.labels dan validation_generator.labels
train_labels_categorical = to_categorical(train_generator.labels)
validation_labels_categorical = to_categorical(validation_generator.labels)

model.compile(loss = 'categorical_crossentropy', optimizer= tf.keras.optimizers.Adam(), metrics=['acc'])

"""Melatih Model"""

history = model.fit(train_generator,
                    epochs = 25,
                    verbose = 2,
                   validation_data = validation_generator)

"""Menguji Model Dengan Cara Megapload Gambar"""

uploaded = files.upload()

for fn in uploaded.keys():
    # Load gambar
    path = fn
    img = image.load_img(path, target_size=(150, 150))

    # Tampilkan gambar
    imgplot = plt.imshow(img)
    plt.show()

    # Preproses gambar untuk prediksi
    x = image.img_to_array(img)
    x = np.expand_dims(x, axis=0)
    x = x / 255.0  # Normalisasi pixel value menjadi antara 0 dan 1

    # Prediksi
    classes = model.predict(x)

    # Penentuan hasil prediksi
    predicted_class = np.argmax(classes)

    print(fn)
    if predicted_class == 0:
        print('Tangan Ini Termasuk Dalam Simbol Kertas/Papper')
    elif predicted_class == 1:
        print('Tangan Ini Termasuk Dalam Simbol Batu/Rock')
    elif predicted_class == 2:
        print('Tangan ini Termasuk Dalam Simbol Gunting/Scissors')
    else:
        print('Unknown class')

classes

print(train_generator.class_indices)